/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.AirTraficController;

import dao.FlightDao;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import model.Flight;
import org.apache.commons.lang3.ObjectUtils;
import utils.DateUtils;

/**
 *
 * @author limingxia
 */
public class AirTrafficControllerStatusPanel extends javax.swing.JPanel {
    private List<Flight> flights = new ArrayList<>();
    
    /**
     * Creates new form contentTablePanel
     */
    public AirTrafficControllerStatusPanel() {
        initComponents();
        initFlights();
        populateDepatureTable(flights);
        populateArrivalTable(flights);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        roundPanel1 = new ui.component.RoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArrival = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDepature = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));
        setOpaque(false);

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblArrival.setBackground(new java.awt.Color(204, 204, 204));
        tblArrival.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Flight No.", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblArrival);

        tblDepature.setBackground(new java.awt.Color(204, 204, 204));
        tblDepature.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Flight No.", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDepature);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(106, 133, 182));
        jLabel3.setText("Arrival Flight");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(106, 133, 182));
        jLabel4.setText("Depature Flight");

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(42, 42, 42))
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void initFlights() {
        flights = FlightDao.queryFlightList();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private ui.component.RoundPanel roundPanel1;
    private javax.swing.JTable tblArrival;
    private javax.swing.JTable tblDepature;
    // End of variables declaration//GEN-END:variables
    
    private void populateDepatureTable(List<Flight> flights) {
        DefaultTableModel model = (DefaultTableModel) tblDepature.getModel();
        model.setRowCount(0);

        if (ObjectUtils.isEmpty(flights)) {
            return;
        }

        for (Flight f : flights) {

            Object[] row = new Object[2];
            if (f.getDepartureOrArrival() == true){
               row[0] = f;
               if (f.getStatus() == 0){
                    row[1] = "NORMAL";
                }else if (f.getStatus() == 1){
                    row[1] = "DELAY";
                }else{
                    row[1] = "CANCEL";
                }
               model.addRow(row); 
            }
            
            //row[1] = f.getFlightCompany().getFcName();
            //row[2] = DateUtils.dateToString(f.getDepartureTime());
            //row[3] = DateUtils.dateToString(f.getArrivalTime());
            //row[4] = f.getDuration();
            //row[1] = f.getStatus();
            
        }
    }
    private void populateArrivalTable(List<Flight> flights) {
        DefaultTableModel model = (DefaultTableModel) tblArrival.getModel();
        model.setRowCount(0);

        if (ObjectUtils.isEmpty(flights)) {
            return;
        }

        for (Flight f : flights) {

            Object[] row = new Object[4];
            if (f.getDepartureOrArrival() == false){
               row[0] = f;
               if (f.getStatus() == 0){
                    row[1] = "NORMAL";
                }else if (f.getStatus() == 1){
                    row[1] = "DELAY";
                }else{
                    row[1] = "CANCEL";
                }
               model.addRow(row); 

            }
            //row[1] = f.getFlightCompany().getFcName();
            //row[2] = DateUtils.dateToString(f.getDepartureTime());
            //row[3] = DateUtils.dateToString(f.getArrivalTime());
            //row[4] = f.getDuration();
            //row[1] = f.getStatus();
        }
    }
}
